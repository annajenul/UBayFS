[{"path":[]},{"path":"https://annajenul.github.io/UBayFS/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://annajenul.github.io/UBayFS/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://annajenul.github.io/UBayFS/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://annajenul.github.io/UBayFS/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://annajenul.github.io/UBayFS/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement anna.jenul@nmbu.. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://annajenul.github.io/UBayFS/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://annajenul.github.io/UBayFS/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://annajenul.github.io/UBayFS/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://annajenul.github.io/UBayFS/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://annajenul.github.io/UBayFS/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://annajenul.github.io/UBayFS/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://annajenul.github.io/UBayFS/articles/BFS_UBayFS.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Block feature selection with UBayFS","text":"Block feature selection essential different fields application, including treatment outcome prediction healthcare (diseases cancer). Commonly, data available multiple sources, including clinical, genetic, image data, measurements common source aggregated feature block. many cases, however, data sources relevant machine learning models: Suppose suspected image data contain additional information feature blocks. case, might easier, terms data acquisition availability, favor models depend data sources . order detect single feature block provide additional information, block feature selection can deployed. UBayFS able cover scenario specifying constraints block level.","code":""},{"path":"https://annajenul.github.io/UBayFS/articles/BFS_UBayFS.html","id":"ubayfs-example","dir":"Articles","previous_headings":"","what":"UBayFS example","title":"Block feature selection with UBayFS","text":"first load package Breast Cancer Wisconsin (BCW) example dataset, described main vignette. block feature selection, necessary define feature’s block affiliation, provided either () via block list, (b) via block matrix.","code":"library(UBayFS) #> Warning in rgl.init(initValue, onlyNULL): RGL: unable to open X11 display #> Warning: 'rgl.init' failed, running with 'rgl.useNULL = TRUE'. data(bcw)"},{"path":"https://annajenul.github.io/UBayFS/articles/BFS_UBayFS.html","id":"version-a-block-list","dir":"Articles","previous_headings":"UBayFS example","what":"Version (a): block list","title":"Block feature selection with UBayFS","text":"first example demonstrates list block indices can provide block structure dataset. define three blocks BCW dataset, first block contains features indices 1 10, block two features indices 11 20, block three features indices 21 30. UBayFS model, define max-size block constraint restricting number selected blocks () one. Thus, constraint_vars parameter set maximum number blocks selected, num_elements contains number blocks, equals number elements block_list.","code":"block_list = list() block_list[[1]] = 1:10 block_list[[2]] = 11:20 block_list[[3]] = 21:30  block_list #> [[1]] #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> [[2]] #>  [1] 11 12 13 14 15 16 17 18 19 20 #>  #> [[3]] #>  [1] 21 22 23 24 25 26 27 28 29 30 block_constraints = buildConstraints(constraint_types = c(\"max_size\"),                                       constraint_vars = list(1),                                       num_elements = length(block_list),                                       rho = 1,                                       block_list = block_list)  block_constraints #> $A #>      [,1] [,2] [,3] #> [1,]    1    1    1 #>  #> $b #> [1] 1 #>  #> $rho #> [1] 1 #>  #> $block_matrix #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] #> [1,]    1    1    1    1    1    1    1    1    1     1     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0 #> [2,]    0    0    0    0    0    0    0    0    0     0     1     1     1     1     1     1     1     1     1     1     0     0     0     0     0     0     0     0     0     0 #> [3,]    0    0    0    0    0    0    0    0    0     0     0     0     0     0     0     0     0     0     0     0     1     1     1     1     1     1     1     1     1     1"},{"path":"https://annajenul.github.io/UBayFS/articles/BFS_UBayFS.html","id":"version-b-block-matrix","dir":"Articles","previous_headings":"UBayFS example","what":"Version (b): block matrix","title":"Block feature selection with UBayFS","text":"Assuming block structure block list, demonstrate specify block structure UBayFS via block matrix. block matrix binary assignment matrix consisting rows representing feature blocks columns representing features dataset. Note , general, feature may assigned arbitrary number blocks (.e., row column sums restricted), practice, partition feature set sufficient cases. block feature constraints block list can produced using block matrix. However, note num_elements parameter, specifying number blocks, set number rows block matrix:","code":"block_matrix = matrix(0, nrow = 3, ncol = ncol(bcw$data)) block_matrix[1, 1:10] = 1 block_matrix[2, 11:20] = 1 block_matrix[3, 21:30] = 1  block_matrix #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] #> [1,]    1    1    1    1    1    1    1    1    1     1     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0 #> [2,]    0    0    0    0    0    0    0    0    0     0     1     1     1     1     1     1     1     1     1     1     0     0     0     0     0     0     0     0     0     0 #> [3,]    0    0    0    0    0    0    0    0    0     0     0     0     0     0     0     0     0     0     0     0     1     1     1     1     1     1     1     1     1     1 block_constraints = buildConstraints(constraint_types = c(\"max_size\", \"must_link\"),                                       constraint_vars = list(1, c(1,2)),                                       num_elements = nrow(block_matrix),                                       rho = 1,                                       block_matrix = block_matrix)  block_constraints #> $A #>      [,1] [,2] [,3] #> [1,]    1    1    1 #> [2,]   -1    1    0 #> [3,]    1   -1    0 #>  #> $b #> [1] 1 0 0 #>  #> $rho #> [1] 1 1 1 #>  #> $block_matrix #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28] [,29] [,30] #> [1,]    1    1    1    1    1    1    1    1    1     1     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0 #> [2,]    0    0    0    0    0    0    0    0    0     0     1     1     1     1     1     1     1     1     1     1     0     0     0     0     0     0     0     0     0     0 #> [3,]    0    0    0    0    0    0    0    0    0     0     0     0     0     0     0     0     0     0     0     0     1     1     1     1     1     1     1     1     1     1"},{"path":"https://annajenul.github.io/UBayFS/articles/BFS_UBayFS.html","id":"block-wise-prior-weights","dir":"Articles","previous_headings":"UBayFS example","what":"Block-wise prior weights","title":"Block feature selection with UBayFS","text":"addition block-wise constraints, also prior weights may specified block level rather feature level. Thus, define help function build vector prior block weights. Features block get assigned prior weight. example, feature weights block 1 set 0.5, feature weights block 2 set 1, feature weights block 3 set 2.","code":"build_block_weights = function(blocks, weights){     return(weights[blocks]) } prior_weights = build_block_weights(blocks = rep(c(1, 2, 3), each = 10), weights = c(0.5, 1, 2))"},{"path":"https://annajenul.github.io/UBayFS/articles/BFS_UBayFS.html","id":"evaluation-of-block-feature-selection-results","dir":"Articles","previous_headings":"UBayFS example","what":"Evaluation of block feature selection results","title":"Block feature selection with UBayFS","text":"specifying block constraints, initialize UBayFS model. addition block constraints, require three features selected total (max-size constraint). observe, summary() prints additional line block constraints. steps similar UBayFS variant without block constraints. example, three features third block selected. Hence, constraints fulfilled.  plot, block constraints shown dashed lines, solid lines represent ordinary (feature-)constraints. demonstrated, blocks 1 2 connected via must-link constraint (dotted line features block 1 block 2). Properties final feature set(s):","code":"set.seed(1) # for reproducibility model = build.UBaymodel(data = bcw$data,                         target = bcw$labels,                         M = 100,                          tt_split = 0.75,                         nr_features = 10,                         method = \"mRMR\",                         prior_model =\"dirichlet\",                         weights = prior_weights,                         lambda = 1,                         constraints = buildConstraints(constraint_types = c(\"max_size\"),                                                         constraint_vars = list(3),                                                         num_elements = ncol(bcw$data),                                                         rho = 1),                         block_constraints = block_constraints,                         optim_method = \"GA\",                         popsize = 100,                         maxiter = 100,                         shiny = FALSE                         ) summary(model) #>  UBayFS model summary  #>   data:  569x30  #>   labels:  B: 357 M: 212  #>  #>   === prior constraints ===  #>   constraint 1: (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1) x <= 3; rho = 1  #>   block constraint 1: (1,1,1) x <= 1; rho = 1 #>  block constraint 2: (-1,1,0) x <= 0; rho = 1 #>  block constraint 3: (1,-1,0) x <= 0; rho = 1   #>   === prior weights ===  #>   weights: ( 0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2 )  #>  #>   === likelihood ===  #>   ensemble counts: ( 0,9,76,0,0,0,100,100,0,0,0,0,3,100,0,0,4,0,0,0,100,89,100,100,1,18,100,100,0,0 )  #>  #>   === feature selection results ===  #>  no output produced yet model = UBayFS::train(model) #> Running Genetic Algorithm summary(model) #>  UBayFS model summary  #>   data:  569x30  #>   labels:  B: 357 M: 212  #>  #>   === prior constraints ===  #>   constraint 1: (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1) x <= 3; rho = 1  #>   block constraint 1: (1,1,1) x <= 1; rho = 1 #>  block constraint 2: (-1,1,0) x <= 0; rho = 1 #>  block constraint 3: (1,-1,0) x <= 0; rho = 1   #>   === prior weights ===  #>   weights: ( 0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2 )  #>  #>   === likelihood ===  #>   ensemble counts: ( 0,9,76,0,0,0,100,100,0,0,0,0,3,100,0,0,4,0,0,0,100,89,100,100,1,18,100,100,0,0 )  #>  #>   === feature selection results ===  #>   ( 21,24,27 ) #>  ( 21,24,28 ) #>  ( 21,23,28 ) #>  ( 21,27,28 ) #>  ( 21,23,24 ) plot(model) #> [1] \"Warning: multiple optimal feature sets, plotting first feature set.\" evaluateMultiple(state = model$output$feature_set[1,], model = model) #>                                       1 #> cardinality                        3.00 #> log total utility                 -1.22 #> log posterior feature utility     -1.22 #> log admissibility                  0.00 #> log block admissibility            0.00 #> number violated constraints        0.00 #> number violated block-constraints  0.00 #> avg feature correlation            0.77"},{"path":"https://annajenul.github.io/UBayFS/articles/BFS_UBayFS.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Block feature selection with UBayFS","text":"specification block constraints UBayFS model follows syntax ordinary feature set constraints. Thus, block constraints can easily integrated combined feature-wise constraints. , framework allows setting arbitrary linear constraints blocks, well single features.","code":""},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"A quick tour through UBayFS","text":"UBayFS package implements framework proposed (Jenul et al. 2022), together interactive Shiny dashboard, makes UBayFS applicable R-users different levels expertise. UBayFS ensemble feature selection technique embedded Bayesian statistical framework. method combines data user knowledge, first extracted via data-driven ensemble feature selection. user can control feature selection assigning prior weights features penalizing specific feature combinations. particular, user can define maximum number selected features must-link constraints (features must selected together) -link constraints (features must selected together). parameter \\(\\rho\\) regulates shape penalty term accounting side constraints, feature sets violate constraints lead lower target value. vignette, use Breast Cancer Wisconsin dataset (Wolberg Mangasarian 1990) demonstration. Specifically, dataset consists 569 samples 30 features can downloaded demo dataset calling data(bcw). dataset describes classification problem, aim distinguish malignant benign cancer based image data. Features derived 10 image characteristics, characteristic represented three features (summary statistics) dataset. instance, characteristic radius represented features radius mean, radius standard deviation, radius worst. UBayFS implemented via core S3-class UBaymodel, along help functions. overview ‘UBaymodel’ class main generic functions shown following diagram:","code":""},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"requirements-and-dependencies","dir":"Articles","previous_headings":"Introduction","what":"Requirements and dependencies","title":"A quick tour through UBayFS","text":"R (>= 3.5.0) GA matrixStats shiny mRMRe Rdimtools DirichletReg ggplot2 gridExtra utils hyper2 methods prettydoc addition, functionality package (particular, interactive Shiny interface) requires following dependencies: shinyWidgets shinyalert DT RColorBrewer tcltk shinyjs shinythemes shinyBS testthat (>= 3.0.0) rmarkdown dplyr plyr knitr Like R packages, UBayFS loaded using library(UBayFS) command. sample dataset accessed via data(bcw).","code":"library(UBayFS) #> Warning in rgl.init(initValue, onlyNULL): RGL: unable to open X11 display #> Warning: 'rgl.init' failed, running with 'rgl.useNULL = TRUE'. data(bcw)"},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"A quick tour through UBayFS","text":"section summarizes core parts UBayFS, central part Bayes’ Theorem two random variables \\(\\boldsymbol{\\theta}\\) \\(\\boldsymbol{y}\\): \\[p(\\boldsymbol{\\theta}|\\boldsymbol{y})\\propto p(\\boldsymbol{y}|\\boldsymbol{\\theta})\\cdot p(\\boldsymbol{\\theta}),\\] \\(\\boldsymbol{\\theta}\\) represents importance parameter single features \\(\\boldsymbol{y}\\) collects evidence \\(\\boldsymbol{\\theta}\\) ensemble elementary feature selectors. following, concept outlined.","code":""},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"ensemble-feature-selection-as-likelihood","dir":"Articles","previous_headings":"Background","what":"Ensemble feature selection as likelihood","title":"A quick tour through UBayFS","text":"first step UBayFS build \\(M\\) ensembles elementary feature selectors. elementary feature selector \\(m=1,\\dots,M\\) selects features, denoted binary membership vector \\(\\boldsymbol{\\delta}^{(m)} \\\\{0,1\\}^N\\), based randomly selected training dataset, \\(N\\) denotes total number features dataset. binary membership vector \\(\\boldsymbol{\\delta}^{(m)}\\), component \\(\\delta_i^{(m)}=1\\) indicates feature \\(\\\\{1,\\dots,N\\}\\) selected, \\(\\delta_i^{(m)}=0\\) otherwise. Statistically, interpret result elementary feature selector realization multinomial distribution parameters \\(\\boldsymbol{\\theta}\\) \\(l\\), \\(\\boldsymbol{\\theta}\\[0,1]^N\\) defines success probabilities sampling feature individual feature selection \\(l\\) corresponds number features selected \\(\\boldsymbol{\\delta}^{(m)}\\). Therefore, joint probability density observed data \\(\\boldsymbol{y} = \\sum\\limits_{m=1}^{M}\\boldsymbol{\\delta}^{(m)}\\\\{0,\\dots,M\\}^N\\) — likelihood function — form \\[ p(\\boldsymbol{y}|\\boldsymbol{\\theta}) = \\prod\\limits_{m=1}^{M} f_{\\text{mult}}(\\boldsymbol{\\delta}^{(m)};\\boldsymbol{\\theta},l),\\] \\(f_{\\text{mult}}\\) probability density function multinomial distribution.","code":""},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"expert-knowledge-as-prior","dir":"Articles","previous_headings":"Background","what":"Expert knowledge as prior","title":"A quick tour through UBayFS","text":"UBayFS includes two types expert knowledge: prior feature weights feature set constraints.","code":""},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"prior-feature-weights","dir":"Articles","previous_headings":"Background > Expert knowledge as prior","what":"Prior feature weights","title":"A quick tour through UBayFS","text":"introduce expert knowledge importance features, user may define vector \\(\\boldsymbol{\\alpha} = (\\alpha_1,\\dots,\\alpha_N)\\), \\(\\alpha_i>0\\) \\(=1,\\dots,N\\), assigning weight feature. High weights indicate feature important. default, features equally important prior weighting used, \\(\\boldsymbol{\\alpha}\\) set 1-vector length \\(N\\). weighting place, assume -priori feature importance parameter \\(\\boldsymbol{\\theta}\\) follows Dirichlet distribution (Maier 2020) \\[p(\\boldsymbol{\\theta}) = f_{\\text{Dir}}(\\boldsymbol{\\theta};\\boldsymbol{\\alpha}),\\] probability density function Dirichlet distribution given \\[f_{\\text{Dir}}(\\boldsymbol{\\theta};\\boldsymbol{\\alpha}) = \\frac{1}{\\text{B}(\\boldsymbol{\\alpha})} \\prod\\limits_{n=1}^N \\theta_n^{\\alpha_n-1},\\] \\(\\text{B}(.)\\) denotes multivariate Beta function. Generalizations Dirichlet distribution Hankin (2010) also implemented UBayFS. Since Dirichlet distribution conjugate prior respect multivariate likelihood, posterior density given \\[p(\\boldsymbol{\\theta}|\\boldsymbol{y}) \\propto f_{\\text{Dir}}(\\boldsymbol{\\theta};\\boldsymbol{\\alpha}^\\circ),\\] \\[\\boldsymbol{\\alpha}^\\circ = \\left( \\alpha_1 + \\sum\\limits_{m=1}^M \\delta_1^{(m)}, \\dots, \\alpha_N + \\sum\\limits_{m=1}^M \\delta_N^{(m)}  \\right)\\] representing posterior parameter vector \\(\\boldsymbol{\\alpha}^\\circ\\).","code":""},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"feature-set-constraints","dir":"Articles","previous_headings":"Background > Expert knowledge as prior","what":"Feature set constraints","title":"A quick tour through UBayFS","text":"addition prior weighting features, UBayFS user can also add different types constraints feature selection: max-size constraint: Maximum number features shall selected. must-link constraint: pair features, either none selected (defined pairwise constraints, one pair features). -link constraint: Used pair features must selected jointly. block-wise constraints: Define constraints feature blocks (instead individual features). Constraints represented linear system linear inequalities \\(\\boldsymbol{}\\boldsymbol{\\delta}-\\boldsymbol{b}\\leq \\boldsymbol{0}\\), \\(\\boldsymbol{}\\\\mathbb{R}^{K\\times N}\\) \\(\\boldsymbol{b}\\\\mathbb{R}^K\\). \\(K\\) denotes total number constraints. constraint \\(k \\1,..,K\\), feature set \\(\\boldsymbol{\\delta}\\) admissible \\(\\left(\\boldsymbol{}^{(k)}\\right)^T\\boldsymbol{\\delta} - b^{(k)} \\leq 0\\), leading inadmissibility function (penalty term) \\[\\begin{align} \\kappa_{k,\\rho}(\\boldsymbol{\\delta}) = \\left\\{     \\begin{array}{l l}     0 & \\text{}~\\left(\\boldsymbol{}^{(k)}\\right)^T\\boldsymbol{\\delta}\\leq b^{(k)}\\\\     1 & \\text{}~ \\left(\\boldsymbol{}^{(k)}\\right)^T\\boldsymbol{\\delta}> b^{(k)} \\land \\rho =\\infty\\\\     \\frac{1-\\xi_{k,\\rho}}{1 + \\xi_{k,\\rho}} & \\text{otherwise},     \\end{array}     \\right. \\end{align}\\] \\(\\rho\\\\mathbb{R}^+ \\cup \\{\\infty\\}\\) denotes relaxation parameter \\(\\xi_{k,\\rho} = \\exp\\left(-\\rho \\left(\\left( \\boldsymbol{}^{(k)}\\right)^T\\boldsymbol{\\delta} - b^{(k)}\\right)\\right)\\) defines exponential term logistic function. handle \\(K\\) different constraints one feature selection problem, joint inadmissibility function given \\[ \\kappa(\\boldsymbol{\\delta})     = 1 - \\prod\\limits_{k=1}^{K} \\left(1 -\\kappa_{k,\\rho}(\\boldsymbol{\\delta})\\right)\\] originates idea \\(\\kappa = 1\\) (maximum penalization) least one \\(\\kappa_{k,\\rho}=1\\), \\(\\kappa=0\\) (penalization) \\(\\kappa_{k,\\rho}=0\\). obtain optimal feature set \\(\\boldsymbol{\\delta}^\\star\\), use target function \\(U(\\boldsymbol{\\delta}, \\boldsymbol{\\theta})\\) represents posterior expected utility feature sets \\(\\boldsymbol{\\delta}\\) given posterior feature importance parameter \\(\\boldsymbol{\\theta}\\), regularized inadmissibility function \\(\\kappa(.)\\). \\[\\mathbb{E}_{\\boldsymbol{\\theta}|\\boldsymbol{y}}[U(\\boldsymbol{\\delta}, \\boldsymbol{\\theta}(\\boldsymbol{y}))] = \\boldsymbol{\\delta}^T \\mathbb{E}_{\\boldsymbol{\\boldsymbol{\\delta}}|\\boldsymbol{y}}[\\boldsymbol{\\theta}(\\boldsymbol{y})]-\\lambda\\kappa(\\boldsymbol{\\delta})\\longrightarrow \\underset{\\boldsymbol{\\delta}\\\\{0,1\\}^N}{\\text{arg max}} \\] Since exact optimization impossible due non-linear function \\(\\kappa\\), use genetic algorithm find appropriate feature set. detail, genetic algorithm initialized via Greedy algorithm computes combinations given feature sets regard fitness function iteration.","code":""},{"path":[]},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"ensemble-training","dir":"Articles","previous_headings":"Application of UBayFS","what":"Ensemble Training","title":"A quick tour through UBayFS","text":"function build.UBaymodel() initializes UBayFS model trains ensemble elementary feature selectors. training dataset target initialized arguments data target. Although UBayFS concept permits unsupervised, multiclass, regression setups, current implementation supports binary target variables . M defines ensemble size (number elementary feature selectors), types elementary feature selectors set via method. Three different feature selectors (mRMR, Fisher schore Laplace score) implemented baseline. general, method argument allows self-implemented feature selection function arguments X (describes data), y (describes target, n (describes number features shall selected), name (name method). function must return indices selected features input name. example classification trees shown . ensemble model trained random subset comprising tt_split\\(\\cdot 100\\) percent train data. help function buildConstraints(...) provides easy way define side constraints model. Using argument prior_model user specifies whether standard Dirichlet distribution generalized variant used prior model. Furthermore, number features selected ensemble can controlled parameter nr_features. standard UBayFS initialization, prior feature weights set 1, feature constraints included yet. summary() function provides overview dataset, prior weights, likelihood — ensemble counts indicate often feature selected ensemble feature selections. prior constraints shown linear inequation system together penalty term \\(\\rho\\). , current prior weight ensemble feature counts (likelihood) feature printed. model trained yet, final feature selection result empty. addition mRMR, add function decision_tree() computes features based decision tree importances. Examples feature selection methods :","code":"model = build.UBaymodel(data = bcw$data,                         target = bcw$labels,                         M = 100,                          tt_split = 0.75,                         nr_features = 10,                         method = \"mRMR\",                         prior_model =\"dirichlet\",                         weights = 0.01,                         lambda = 1,                         constraints = buildConstraints(constraint_types = c(\"max_size\"),                                                         constraint_vars = list(3),                                                         num_elements = dim(bcw$data)[2],                                                         rho = 1),                         block_constraints = NULL,                         optim_method = \"GA\",                         popsize = 100,                         maxiter = 100,                         shiny = FALSE                         ) summary(model) #>  UBayFS model summary  #>   data:  569x30  #>   labels:  B: 357 M: 212  #>  #>   === prior constraints ===  #>   constraint 1: (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1) x <= 3; rho = 1  #>   #>    #>   === prior weights ===  #>   weights: ( 0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01 )  #>  #>   === likelihood ===  #>   ensemble counts: ( 0,12,69,0,0,0,100,100,0,0,0,0,3,100,0,0,9,0,0,0,100,88,100,100,3,15,100,100,1,0 )  #>  #>   === feature selection results ===  #>  no output produced yet library(rpart) decision_tree <- function(X, y, n, name = \"tree\"){   rf_data = as.data.frame(cbind(y, X))   colnames(rf_data) <- make.names(colnames(rf_data))   tree = rpart::rpart(y~., data = rf_data) return(list(ranks= which(colnames(X) %in% names(tree$variable.importance)[1:n]),             name = name)) }  model = build.UBaymodel(data = bcw$data,                         target = bcw$labels,                         M = 100,                          tt_split = 0.75,                         nr_features = 10,                         method = c(\"mRMR\", decision_tree),                         prior_model =\"dirichlet\",                         weights = 0.01,                         lambda = 1,                         constraints = buildConstraints(constraint_types = c(\"max_size\"),                                                         constraint_vars = list(3),                                                         num_elements = dim(bcw$data)[2],                                                         rho = 1),                         block_constraints = NULL,                         optim_method = \"GA\",                         popsize = 100,                         maxiter = 100,                         shiny = FALSE                         ) # recursive feature elimination library(caret) rec_fe <- function(X,y,n, name=\"rfe\"){   if(is.factor(y)){         control <- rfeControl(functions=rfFuncs, method = \"cv\", number = 2)       }       else{         control <- rfeControl(functions=lmFuncs, method = \"cv\", number = 2)       }       results <- caret::rfe(X, y, sizes = n, rfeControl=control)       return(list(ranks = which(colnames(X) %in% results$optVariables),                   name = name)) }  # Lasso library(glmnet) lasso <- function(X, y, n=NULL, name=\"lasso\"){   family = ifelse(is.factor(y), \"binomial\", \"gaussian\")   cv.lasso <- cv.glmnet(as.matrix(X), y, intercept = FALSE, alpha = 1, family = family, nfolds=3)   model <- glmnet(as.matrix(X), y, intercept = FALSE, alpha = 1, family = family,                   lambda = cv.lasso$lambda.min)   return(list(ranks = which(as.vector(model$beta) != 0),               name = name)) }  # HSIC Lasso library(GSelection) hsic_lasso <- function(X, y, n, name=\"hsic\"){   ifelse(is.factor(y), {tl = as.numeric(as.integer(y)-1)}, {tl = y})   results = feature.selection(X, tl, n)   return(list(ranks = results$hsic_selected_feature_index,               name = name)) }"},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"user-knowledge","dir":"Articles","previous_headings":"Application of UBayFS","what":"User knowledge","title":"A quick tour through UBayFS","text":"Using function setWeights() user able change feature weights standard initialization desired values. example, assign equal weights features originating image characteristic. Weights can arbitrary scale. difficult specify prior weights real-life applications, suggest define normalized scale. Feature constraints can defined using function buildConstraints(). input constraint_types consists vector, constraint types defined. , constraint_vars, user specifies details constraint: max-size, number features select provided, must-link -link, set feature indices linked must provided. list entry corresponds one constraint constraint_types. addition, num_features denotes total number features dataset rho corresponds relaxation parameter admissibility function. Applying print(constraints) demonstrates , matrix ten rows represent four constraints. max-size -link can expressed one equation , must-link pairwise constraint. specific, must-link constraint \\(n\\) features produces \\(\\frac{n!}{(n-2)!}\\) elementary constraints. Hence, six equations represent must-link constraint. function setConstraints() integrates constraints UBayFS model.","code":"weights = rep(c(10,15,20,16,15,10,12,17,21,14), 3) strength = 1 weights = weights * strength / sum(weights) print(weights) #>  [1] 0.02222222 0.03333333 0.04444444 0.03555556 0.03333333 0.02222222 #>  [7] 0.02666667 0.03777778 0.04666667 0.03111111 0.02222222 0.03333333 #> [13] 0.04444444 0.03555556 0.03333333 0.02222222 0.02666667 0.03777778 #> [19] 0.04666667 0.03111111 0.02222222 0.03333333 0.04444444 0.03555556 #> [25] 0.03333333 0.02222222 0.02666667 0.03777778 0.04666667 0.03111111  model = setWeights(model = model,                     weights = weights) constraints = buildConstraints(constraint_types = c(\"max_size\",                                                      \"must_link\",                                                      rep(\"cannot_link\", 2)),                                constraint_vars = list(10, # max-size (maximal 10 features)                                                       c(1,11,21), # must-link between features 1, 11, and 21                                                       c(1,10), # cannot-link between features 1, and 10                                                       c(20,23,24)), # cannot-link between features 20, 23, and 24                                num_elements = ncol(model$data),                                 rho = c(Inf, # max_size                                         0.1, # rho for must-link                                         1, # rho for first cannot-link                                         1)) # rho for second cannot-link print(constraints) #> $A #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]    1    1    1    1    1    1    1    1    1     1     1     1     1 #>  [2,]   -1    0    0    0    0    0    0    0    0     0     1     0     0 #>  [3,]   -1    0    0    0    0    0    0    0    0     0     0     0     0 #>  [4,]    1    0    0    0    0    0    0    0    0     0    -1     0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0    -1     0     0 #>  [6,]    1    0    0    0    0    0    0    0    0     0     0     0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0     1     0     0 #>  [8,]    1    0    0    0    0    0    0    0    0     1     0     0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     0     0     0     0 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]     1     1     1     1     1     1     1     1     1     1     1     1 #>  [2,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [3,]     0     0     0     0     0     0     0     1     0     0     0     0 #>  [4,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [5,]     0     0     0     0     0     0     0     1     0     0     0     0 #>  [6,]     0     0     0     0     0     0     0    -1     0     0     0     0 #>  [7,]     0     0     0     0     0     0     0    -1     0     0     0     0 #>  [8,]     0     0     0     0     0     0     0     0     0     0     0     0 #>  [9,]     0     0     0     0     0     0     1     0     0     1     1     0 #>       [,26] [,27] [,28] [,29] [,30] #>  [1,]     1     1     1     1     1 #>  [2,]     0     0     0     0     0 #>  [3,]     0     0     0     0     0 #>  [4,]     0     0     0     0     0 #>  [5,]     0     0     0     0     0 #>  [6,]     0     0     0     0     0 #>  [7,]     0     0     0     0     0 #>  [8,]     0     0     0     0     0 #>  [9,]     0     0     0     0     0 #>  #> $b #> [1] 10  0  0  0  0  0  0  1  1 #>  #> $rho #> [1] Inf 0.1 0.1 0.1 0.1 0.1 0.1 1.0 1.0 #>  #> $block_matrix #> NULL  model = setConstraints(model = model, constraints = constraints) model = setBlockConstraints(model = model, constraints = NULL)"},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"optimization-and-evaluation","dir":"Articles","previous_headings":"Application of UBayFS","what":"Optimization and evaluation","title":"A quick tour through UBayFS","text":"genetic algorithm, described (Givens Hoeting 2012) implemented (Scrucca 2013), searches optimal feature set UBayFS framework. Using setOptim() initialize genetic algorithm. Furthermore, popsize indicates number candidate feature sets created iteration, maxiter number iterations. point, initialized prior weights, constraints, optimization procedure — can now train UBayFS model using generic function train(), relying genetic algorithm. summary() function provides overview components UBayFS. plot() function shows prior feature information bar charts, selected features marked red borders. addition, constraints regularization parameter \\(\\rho\\) presented. training model, receive feature selection result. one optimal feature set MAP score possible. plot shows selected features (red framed) selection distribution ensemble feature selection prior weights. constraints shown top, connecting line drawn features one constraint. final feature set additional properties can evaluated evaluateFS(): output contains following information: cardinality: number selected features log total utility: value target function optimization log posterior feature utility: cumulated importances selected features substracting penalization term log admissibility: 0, constraints fulfilled, otherwise least one constraint violated log block admissibility: log admissibility block constraints number violated constraints: number violated constraints number violated block-constraints: number violated block constraints; NA block structure given avg feature correlation: average correlation features dataset","code":"model = setOptim(model = model,                  popsize = 100,                   maxiter = 200) model = UBayFS::train(x = model) #> Running Genetic Algorithm summary(model) #>  UBayFS model summary  #>   data:  569x30  #>   labels:  B: 357 M: 212  #>  #>   === prior constraints ===  #>   constraint 1: (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1) x <= 10; rho = Inf #>  constraint 2: (-1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) x <= 0; rho = 0.1 #>  constraint 3: (-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0) x <= 0; rho = 0.1 #>  constraint 4: (1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) x <= 0; rho = 0.1 #>  constraint 5: (0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0) x <= 0; rho = 0.1 #>  constraint 6: (1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0) x <= 0; rho = 0.1 #>  constraint 7: (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0) x <= 0; rho = 0.1 #>  constraint 8: (1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) x <= 1; rho = 1 #>  constraint 9: (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0) x <= 1; rho = 1  #>   #>    #>   === prior weights ===  #>   weights: ( 0.0222222222222222,0.0333333333333333,0.0444444444444444,0.0355555555555556,0.0333333333333333,0.0222222222222222,0.0266666666666667,0.0377777777777778,0.0466666666666667,0.0311111111111111,0.0222222222222222,0.0333333333333333,0.0444444444444444,0.0355555555555556,0.0333333333333333,0.0222222222222222,0.0266666666666667,0.0377777777777778,0.0466666666666667,0.0311111111111111,0.0222222222222222,0.0333333333333333,0.0444444444444444,0.0355555555555556,0.0333333333333333,0.0222222222222222,0.0266666666666667,0.0377777777777778,0.0466666666666667,0.0311111111111111 )  #>  #>   === likelihood ===  #>   ensemble counts: ( 0,12,69,0,0,0,100,100,0,0,0,0,3,100,0,0,9,0,0,0,100,88,100,100,3,15,100,100,1,0 )  #>  #>   === feature selection results ===  #>   ( 2,3,7,8,14,22,23,26,27,28 ) plot(model) # evaluation feature set evaluateMultiple(state = model$output$feature_set, model = model) #>                                    [,1] #> cardinality                       10.00 #> log total utility                 -0.24 #> log posterior feature utility     -0.24 #> log admissibility                  0.00 #> log block admissibility            0.00 #> number violated constraints        0.00 #> number violated block-constraints    NA #> avg feature correlation            0.61"},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"shiny-dashboard","dir":"Articles","previous_headings":"","what":"Shiny dashboard","title":"A quick tour through UBayFS","text":"UBayFS provides interactive R Shiny dashboard GUI. intuitive user interface, user can load data, set likelihood parameters, even control admissibility regularization strength constraint. command runInteractive(), Shiny dashboard opens, given required depedencies available (see ). Histograms plots help get overview user’s settings. interactive dashboard offers save load buttons save load UBayFS models RData files. Due computational limitations, recommended use HTML interface larger datasets (\\(> 100\\) features \\(>1000\\) samples).  dashboard includes multiple tabs: data: Load dataset specify whether row names, column names block structure present. demo dataset ready loaded used first touch package. likelihood: Select elementary feature selectors ensemble feature selection, number models \\(M\\), number features model, ratio train-test split. , dashboard allows user mix different elementary feature selectors, although option recommended due limited stability (Seijo-Pardo et al. 2017). weights: prior feature weights set user. block feature selection, possible set weights blocks; otherwise, single feature. constraints: task, user sets different constraints (least max-size constraint). penalty \\(\\rho\\) can varied well. feature selection: dashboard’s last step, optimization procedure determines final feature set. plot final result produced - also, model can saved Rdata file loaded dashboard .","code":"runInteractive()"},{"path":"https://annajenul.github.io/UBayFS/articles/UBayFS.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"A quick tour through UBayFS","text":"methodology place, UBayFS applicable large range feature selection problems multiple sources information. likelihood parameters, steering number elementary models, mainly affect stability runtime result — latter linearly increases number models. Especially Shiny dashboard delivers insight single UBayFS steps. Nevertheless, dashboard applies smaller datasets, larger ones computed console.","code":""},{"path":[]},{"path":"https://annajenul.github.io/UBayFS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anna Jenul. Author, maintainer. Stefan Schrunner. Author. Kristian Hovde Liland. Reviewer. Oliver Tomic. Contributor. Jürgen Pilz. Contributor.","code":""},{"path":"https://annajenul.github.io/UBayFS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jenul , Schrunner S (2022). UBayFS: User-Guided Bayesian Framework Ensemble Feature Selection (UBayFS). R package version 1.0, https://annajenul.github.io/UBayFS/.","code":"@Manual{,   title = {UBayFS: A User-Guided Bayesian Framework for Ensemble Feature Selection (UBayFS)},   author = {Anna Jenul and Stefan Schrunner},   year = {2022},   note = {R package version 1.0},   url = {https://annajenul.github.io/UBayFS/}, }"},{"path":"https://annajenul.github.io/UBayFS/index.html","id":"ubayfs-","dir":"","previous_headings":"","what":"A User-Guided Bayesian Framework for Ensemble Feature Selection\n    (UBayFS)","title":"A User-Guided Bayesian Framework for Ensemble Feature Selection\n    (UBayFS)","text":"UBayFS package implements framework proposed article Jenul et al. (2022), together interactive Shiny dashbord, makes UBayFS applicable R-users different levels expertise. UBayFS ensemble feature selection technique embedded Bayesian statistical framework. method combines data user knowledge, first extracted via data-driven ensemble feature selection. user can control feature selection assigning prior weights features penalizing specific feature combinations. particular, user can define maximal number selected features must-link constraints (features must selected together) -link constraints (features must selected together). Using relaxed constraints, parameter ρ regulates penalty shape. Hence, violation constraints can valid leads lower target value feature set derived violated constraints. UBayFS can used common feature selection also block feature selection.","code":""},{"path":"https://annajenul.github.io/UBayFS/index.html","id":"documentation-and-structure","dir":"","previous_headings":"","what":"Documentation and Structure","title":"A User-Guided Bayesian Framework for Ensemble Feature Selection\n    (UBayFS)","text":"documentation illustrates UBayFS can used standard feature selection UBayFS implemented via core S3-class ‘UBaymodel’, along help functions. overview ‘UBaymodel’ class main generic functions, shown following diagram:","code":""},{"path":"https://annajenul.github.io/UBayFS/index.html","id":"requirements-and-dependencies","dir":"","previous_headings":"","what":"Requirements and Dependencies","title":"A User-Guided Bayesian Framework for Ensemble Feature Selection\n    (UBayFS)","text":"R (>= 3.5.0) GA matrixStats shiny mRMRe Rdimtools DirichletReg ggplot2 gridExtra utils hyper2 methods prettydoc addition, functionality package (particular, interactive Shiny interface) requires following depedencies: shinyWidgets shinyalert DT RColorBrewer shinyjs shinyBS testthat (>= 3.0.0) rmarkdown dplyr plyr knitr rpart GSelection caret glmnet","code":""},{"path":"https://annajenul.github.io/UBayFS/index.html","id":"implementation-details","dir":"","previous_headings":"","what":"Implementation Details","title":"A User-Guided Bayesian Framework for Ensemble Feature Selection\n    (UBayFS)","text":"original paper defines following utility function U(δ,θ) optimization respect δ ∈ {0, 1}N: $$U(\\boldsymbol{\\delta},\\boldsymbol{\\theta}) = \\boldsymbol{\\delta}^T \\boldsymbol{\\theta}-\\lambda \\kappa(\\boldsymbol{\\delta})\\rightarrow \\underset{\\boldsymbol{\\delta}\\\\lbrace 0,1\\rbrace ^N}{\\max}, $$ fixed λ > 0. practical reasons, implementation UBayFS package uses modified utility function Ũ(δ,θ) adds admissibility term 1 − κ(δ) rather subtracting inadmissibility term κ(δ) $$\\tilde{U}(\\boldsymbol{\\delta},\\boldsymbol{\\theta}) = \\boldsymbol{\\delta}^T \\boldsymbol{\\theta}+\\lambda (1-\\kappa(\\boldsymbol{\\delta})) = \\boldsymbol{\\delta}^T \\boldsymbol{\\theta}-\\lambda \\kappa(\\boldsymbol{\\delta}) +\\lambda\\rightarrow \\underset{\\boldsymbol{\\delta}\\\\lbrace 0,1\\rbrace ^N}{\\max}.$$ Thus, function values U(δ,θ) Ũ(δ,θ) deviate constant λ; however, optimal feature set $$\\boldsymbol{\\delta}^{\\star} = \\underset{\\boldsymbol{\\delta}\\\\lbrace 0,1\\rbrace ^N}{\\text{arg max}}~ U(\\boldsymbol{\\delta},\\boldsymbol{\\theta}) = \\underset{\\boldsymbol{\\delta}\\\\lbrace 0,1\\rbrace ^N}{\\text{arg max}}~ \\tilde{U}(\\boldsymbol{\\delta},\\boldsymbol{\\theta})$$ remains unaffected.","code":""},{"path":"https://annajenul.github.io/UBayFS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A User-Guided Bayesian Framework for Ensemble Feature Selection\n    (UBayFS)","text":"development version package can installed : use macOS operator system, make sure XQuartz installed. build vignettes, Pandoc required. may happen Pandoc missing computer, version old. installation return error installation guide Pandoc different operation systems provided .","code":"remotes::install_github(\"annajenul/UBayFS\", build_manual = TRUE, build_vignettes = TRUE) ``` Pandoc is required to build R Markdown vignettes but not available. Please make sure it is installed. ```"},{"path":"https://annajenul.github.io/UBayFS/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"A User-Guided Bayesian Framework for Ensemble Feature Selection\n    (UBayFS)","text":"contribution UBayFS welcome! Contribution package requires agreement Contributor Code Conduct terms. implementation new feature bug-fixing, encourage send Pull Request repository. Please add detailed concise description invented feature bug. case fixing bug, include comments solution. improve UBayFS even , feel free send us issues bugs, sure . thankful kind constructive criticism suggestions.","code":""},{"path":"https://annajenul.github.io/UBayFS/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"A User-Guided Bayesian Framework for Ensemble Feature Selection\n    (UBayFS)","text":"Jenul, ., Schrunner, S., Pilz, J. et al. user-guided Bayesian framework ensemble feature selection life science applications (UBayFS). Mach Learn (2022). https://doi.org/10.1007/s10994-022-06221-9","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/admissibility.html","id":null,"dir":"Reference","previous_headings":"","what":"Admissibility function (kappa) — admissibility","title":"Admissibility function (kappa) — admissibility","text":"Evaluate value admissibility function `kappa`.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/admissibility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Admissibility function (kappa) — admissibility","text":"","code":"admissibility(state, constraints, log = TRUE)  block_admissibility(state, constraints, log = TRUE)"},{"path":"https://annajenul.github.io/UBayFS/reference/admissibility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Admissibility function (kappa) — admissibility","text":"state binary membership vector describing feature set constraints list containing matrix `` vector `b` representing inequality system `Ax<=b` vector `rho` log whether admissibility returned log scale","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/admissibility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Admissibility function (kappa) — admissibility","text":"admissibility value","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/admissibility.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Admissibility function (kappa) — admissibility","text":"block_admissibility(): Evaluates value admissibility function `kappa` block constraints.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/bcw.html","id":null,"dir":"Reference","previous_headings":"","what":"Breast Cancer Wisconsin dataset — bcw","title":"Breast Cancer Wisconsin dataset — bcw","text":"dataset containing features computed digitized images fine needle aspirate (FNA) breast mass. target function contains two classes representing patient diagnoses (M...malignant B...benign). dataset taken UCI Repository Machine Learning Databases created W. H. Wolberg, W. N. Street O. L. Mangasarian 1995. details, see UCI documentation literature: https://doi.org/10.1117/12.148698 https://www.jstor.org/stable/171686 Feature blocks added original dataset according dataset description (10 blocks corresponding different image characteristics).","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/bcw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breast Cancer Wisconsin dataset — bcw","text":"","code":"bcw"},{"path":"https://annajenul.github.io/UBayFS/reference/bcw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Breast Cancer Wisconsin dataset — bcw","text":"list containing: matrix `data` 569 rows 30 columns representing features, vector `labels` factor type 569 entries representing binary target variable, list feature indices representing feature blocks.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/bcw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Breast Cancer Wisconsin dataset — bcw","text":"ftp://ftp.ics.uci.edu/pub/machine-learning-databases","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/build.UBaymodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Build an ensemble for UBayFS — build.UBaymodel","title":"Build an ensemble for UBayFS — build.UBaymodel","text":"Build data structure UBayFS train ensemble elementary feature selectors.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/build.UBaymodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build an ensemble for UBayFS — build.UBaymodel","text":"","code":"build.UBaymodel(   data,   target,   M = 100,   tt_split = 0.75,   nr_features = 10,   method = \"mRMR\",   prior_model = \"dirichlet\",   weights = 1,   constraints = NULL,   block_constraints = NULL,   lambda = 1,   optim_method = \"GA\",   popsize = 50,   maxiter = 100,   shiny = FALSE,   ... )"},{"path":"https://annajenul.github.io/UBayFS/reference/build.UBaymodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build an ensemble for UBayFS — build.UBaymodel","text":"data matrix input data target vector (factor) input labels M number elementary models trained ensemble tt_split ratio samples drawn building elementary model (train-test-split) nr_features number features select elementary model; \"auto\" randomized number features used elementary model method vector denoting method(s) used elementary models; options: `mRMR`, `laplace` (Laplacian score) Also self-defined functions possible methods; must arguments X (data), y (target), n (number features) name (name function). details see examples. prior_model string denoting prior model use; options: `dirichlet`, `wong`, `hankin`; `hankin` general prior model, also time consuming weights vector user-defined prior weights feature constraints list containing relaxed system `Ax<=b` user constraints, given matrix ``, vector `b` vector scalar `rho` (relaxation parameter). least one max-size constraint must contained. details, see buildConstraints. block_constraints list containing relaxed system `Ax<=b` user constraints feature blocks, given matrix ``, vector `b` vector scalar `rho` (relaxation parameter). details, see buildConstraints. lambda positive scalar denoting overall strength constraints optim_method method evaluate posterior distribution. Currently, option `GA` (genetic algorithm) supported. popsize size initial population genetic algorithm model optimization maxiter maximum number iterations genetic algorithm model optimization shiny TRUE indicates function called Shiny dashboard ... additional arguments","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/build.UBaymodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build an ensemble for UBayFS — build.UBaymodel","text":"`UBaymodel` object containing following list elements: `data` - input dataset `target` - input target `lambda` - input lambda value (constraint strength) `prior_model` - chosen prior model `ensemble.params` -  information input output ensemble feature selection `constraint.params` -  parameters representing constraints `user.params` - parameters representing user's prior knowledge `optim.params` - optimization parameters","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/build.UBaymodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build an ensemble for UBayFS — build.UBaymodel","text":"function aggregates input parameters UBayFS - including data, parameters defining ensemble user knowledge parameters specifying optimization procedure - trains ensemble model.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/build.UBaymodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build an ensemble for UBayFS — build.UBaymodel","text":"","code":"# build a UBayFS model using Breast Cancer Wisconsin dataset data(bcw) # dataset c <- buildConstraints(constraint_types = \"max_size\",                       constraint_vars = list(10),                       num_elements = ncol(bcw$data),                       rho = 1) # prior constraints w <- rep(1, ncol(bcw$data)) # weights model <- build.UBaymodel(                      data = bcw$data,                      target = bcw$labels,                      constraints = c,                      weights = w )  # use a function computing a decision tree as input library(\"rpart\") decision_tree <- function(X, y, n, name = \"tree\"){ rf_data = as.data.frame(cbind(y, X)) colnames(rf_data) <- make.names(colnames(rf_data)) tree = rpart::rpart(y~., data = rf_data) return(list(ranks= which(colnames(X) %in% names(tree$variable.importance)[1:n]),            name = name)) }  model <- build.UBaymodel(                      data = bcw$data,                      target = bcw$labels,                      constraints = c,                      weights = w,                      method = decision_tree )  # include block-constraints c_block <- buildConstraints(constraint_types = \"max_size\",                             constraint_vars = list(2),                             num_elements = length(bcw$blocks),                             rho = 10,                             block_list = bcw$blocks) model <- build.UBaymodel(                      data = bcw$data,                      target = bcw$labels,                      constraints = c,                      block_constraints = c_block,                      weights = w )"},{"path":"https://annajenul.github.io/UBayFS/reference/buildConstraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a constraint system — buildConstraints","title":"Build a constraint system — buildConstraints","text":"Build inequation system constraints provided user.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/buildConstraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a constraint system — buildConstraints","text":"","code":"buildConstraints(   constraint_types,   constraint_vars,   num_elements,   rho = 1,   block_list = NULL,   block_matrix = NULL )"},{"path":"https://annajenul.github.io/UBayFS/reference/buildConstraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a constraint system — buildConstraints","text":"constraint_types vector strings denoting type constraint added; options: `max_size`, `must_link`, `cannot_link` constraint_vars list parameters defining constraints; case max-size constraints, list element must contain integer denoting maximum size feature set, case max-link link, list element must vector feature indices linked num_elements total number features (feature-wise constraints) blocks (block-wise constraints) dataset rho positive parameter denoting level relaxation; `Inf` denotes hard constraint, .e. relaxation block_list list feature indices block; required, block-wise constraints built `block_matrix` `NULL` block_matrix matrix containing affiliations features block; required, block-wise constraints built `block_list` `NULL`","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/buildConstraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a constraint system — buildConstraints","text":"list containing matrix `` vector `b` representing inequality system `Ax<=b`, vector `rho`","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/buildConstraints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a constraint system — buildConstraints","text":"function transforms user information relations features (must-link -link constraints) maximum feature set size (max-size) linear inequation system. addition, relaxation parameter `rho` can specified achieve soft constraints.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/buildConstraints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a constraint system — buildConstraints","text":"","code":"# given a dataset with 10 features, we create a max-size constraint limiting # the set to 5 features and a cannot-link constraint between features 1 and 2 buildConstraints(constraint_types = c(\"max_size\",\"cannot_link\"),                  constraint_vars = list(5, c(1,2)),                  num_elements = 10,                  rho = 1) #> $A #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]    1    1    1    1    1    1    1    1    1     1 #> [2,]    1    1    0    0    0    0    0    0    0     0 #>  #> $b #> [1] 5 1 #>  #> $rho #> [1] 1 1 #>  #> $block_matrix #> NULL #>"},{"path":"https://annajenul.github.io/UBayFS/reference/buildDecorrConstraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Build decorrelation constraints — buildDecorrConstraints","title":"Build decorrelation constraints — buildDecorrConstraints","text":"Build link constraint highly correlated features. user defines correlation threshold.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/buildDecorrConstraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build decorrelation constraints — buildDecorrConstraints","text":"","code":"buildDecorrConstraints(data, level = 0.5, method = \"spearman\")"},{"path":"https://annajenul.github.io/UBayFS/reference/buildDecorrConstraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build decorrelation constraints — buildDecorrConstraints","text":"data dataset `UBaymodel` object level threshold correlation-level method method used compute correlation; must one `pearson`, `spearman` `kendall`","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/buildDecorrConstraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build decorrelation constraints — buildDecorrConstraints","text":"list containing matrix `` vector `b` representing inequality system `Ax<=b`, vector `rho` block matrix","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/build_train_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform stratified data partition. — build_train_set","title":"Perform stratified data partition. — build_train_set","text":"Sample indices training data.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/build_train_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform stratified data partition. — build_train_set","text":"","code":"build_train_set(y, tt_split)"},{"path":"https://annajenul.github.io/UBayFS/reference/build_train_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform stratified data partition. — build_train_set","text":"y column, often target, data shall partitioned. tt_split percentage data used training ensemble model.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/build_train_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform stratified data partition. — build_train_set","text":"Data indices training ensembles","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/checkConstraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether a list object implements proper UBayFS user constraints — checkConstraints","title":"Checks whether a list object implements proper UBayFS user constraints — checkConstraints","text":"Checks whether list object implements proper UBayFS user constraints","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/checkConstraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether a list object implements proper UBayFS user constraints — checkConstraints","text":"","code":"checkConstraints(x)"},{"path":"https://annajenul.github.io/UBayFS/reference/checkConstraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether a list object implements proper UBayFS user constraints — checkConstraints","text":"x `UBaymodel` object","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/checkConstraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether a list object implements proper UBayFS user constraints — checkConstraints","text":"boolean value","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/evaluateFS.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate  a feature set — evaluateFS","title":"Evaluate  a feature set — evaluateFS","text":"Evaluates feature set UBayFS model framework.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/evaluateFS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate  a feature set — evaluateFS","text":"","code":"evaluateFS(state, model, method = \"spearman\", log = FALSE)  evaluateMultiple(state, model, method = \"spearman\", log = TRUE)"},{"path":"https://annajenul.github.io/UBayFS/reference/evaluateFS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate  a feature set — evaluateFS","text":"state binary membership vector describing feature set model UBaymodel object created using build.UBaymodel method type correlation (`pearson`,`kendall`, `spearman`) log whether admissibility returned log scale","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/evaluateFS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate  a feature set — evaluateFS","text":"posterior probability value","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/evaluateFS.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Evaluate  a feature set — evaluateFS","text":"evaluateMultiple(): Evaluate multiple feature sets","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/is.UBaymodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether an object is a UBaymodel — is.UBaymodel","title":"Check whether an object is a UBaymodel — is.UBaymodel","text":"Perform consistency checks UBaymodel.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/is.UBaymodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether an object is a UBaymodel — is.UBaymodel","text":"","code":"is.UBaymodel(x)"},{"path":"https://annajenul.github.io/UBayFS/reference/is.UBaymodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether an object is a UBaymodel — is.UBaymodel","text":"x object checked class consistency","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/posteriorExpectation.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior expectation of features — posteriorExpectation","title":"Posterior expectation of features — posteriorExpectation","text":"compute posterior score feature.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/posteriorExpectation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior expectation of features — posteriorExpectation","text":"","code":"posteriorExpectation(model)"},{"path":"https://annajenul.github.io/UBayFS/reference/posteriorExpectation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior expectation of features — posteriorExpectation","text":"model `UBaymodel` object","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/print.UBaymodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a UBayFS model — print.UBaymodel","title":"Print a UBayFS model — print.UBaymodel","text":"Print details UBayFS model.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/print.UBaymodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a UBayFS model — print.UBaymodel","text":"","code":"# S3 method for UBaymodel print(x, ...)  printResults(model)  # S3 method for UBaymodel summary(object, ...)  # S3 method for UBaymodel plot(x, ...)"},{"path":"https://annajenul.github.io/UBayFS/reference/print.UBaymodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a UBayFS model — print.UBaymodel","text":"x `UBaymodel` object created using build.UBaymodel ... additional print parameters model `UBaymodel` object created using build.UBaymodel training object `UBaymodel` object created using build.UBaymodel","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/print.UBaymodel.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Print a UBayFS model — print.UBaymodel","text":"printResults(): Display summarize results UBayFS feature selection. summary(UBaymodel): summary UBayFS model plot(UBaymodel): barplot UBayFS model containing prior weights, ensemble counts selected features.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/runInteractive.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an interactive shiny app for demonstration — runInteractive","title":"Run an interactive shiny app for demonstration — runInteractive","text":"Start shiny application browser.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/runInteractive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an interactive shiny app for demonstration — runInteractive","text":"","code":"runInteractive()"},{"path":"https://annajenul.github.io/UBayFS/reference/sampleInitial.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial feature set sampling using probabilistic Greedy algorithm — sampleInitial","title":"Initial feature set sampling using probabilistic Greedy algorithm — sampleInitial","text":"Sample initial solutions using probabilistic version Greedy algorithm.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/sampleInitial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial feature set sampling using probabilistic Greedy algorithm — sampleInitial","text":"","code":"sampleInitial(post_scores, constraints, block_constraints, size)"},{"path":"https://annajenul.github.io/UBayFS/reference/sampleInitial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial feature set sampling using probabilistic Greedy algorithm — sampleInitial","text":"post_scores vector posterior scores (prior scores + likelihood) feature constraints list containing feature-wise constraints block_constraints list containing block-wise constraints size initial number samples created. output sample size can lower, since duplicates removed.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/sampleInitial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial feature set sampling using probabilistic Greedy algorithm — sampleInitial","text":"matrix containing initial feature sets rows","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/setConstraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Set constraints in UBaymodel object — setConstraints","title":"Set constraints in UBaymodel object — setConstraints","text":"Set constraints `UBaymodel` object. Set block constraints `UBaymodel` object.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/setConstraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set constraints in UBaymodel object — setConstraints","text":"","code":"setConstraints(model, constraints, append = FALSE)  setBlockConstraints(model, constraints, append = FALSE)"},{"path":"https://annajenul.github.io/UBayFS/reference/setConstraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set constraints in UBaymodel object — setConstraints","text":"model `UBaymodel` object created using build.UBaymodel constraints list containing relaxed system `Ax<=b` user constraints, given matrix ``, vector `b` vector scalar `rho` (relaxation parameters); see buildConstraints function append `TRUE`, constraints appended existing constraint system","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/setConstraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set constraints in UBaymodel object — setConstraints","text":"`UBaymodel` object updated constraint parameters","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/setConstraints.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Set constraints in UBaymodel object — setConstraints","text":"setBlockConstraints(): sets block constraints `UBaymodel` object","code":""},{"path":[]},{"path":"https://annajenul.github.io/UBayFS/reference/setOptim.html","id":null,"dir":"Reference","previous_headings":"","what":"Set optimization parameters in a UBaymodel object — setOptim","title":"Set optimization parameters in a UBaymodel object — setOptim","text":"Set optimization parameters UBaymodel object.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/setOptim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set optimization parameters in a UBaymodel object — setOptim","text":"","code":"setOptim(model, method = \"GA\", popsize, maxiter)"},{"path":"https://annajenul.github.io/UBayFS/reference/setOptim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set optimization parameters in a UBaymodel object — setOptim","text":"model UBaymodel object created using build.UBaymodel method method evaluate posterior distribution; currently \"GA\" (genetic algorithm) supported popsize size initial population genetic algorithm model optimization maxiter maximum number iterations genetic algorithm model optimization","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/setOptim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set optimization parameters in a UBaymodel object — setOptim","text":"UBaymodel object updated optimization parameters","code":""},{"path":[]},{"path":"https://annajenul.github.io/UBayFS/reference/setWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Set weights in UBaymodel object — setWeights","title":"Set weights in UBaymodel object — setWeights","text":"Set prior weights UBaymodel object.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/setWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set weights in UBaymodel object — setWeights","text":"","code":"setWeights(model, weights, block_list = NULL, block_matrix = NULL)"},{"path":"https://annajenul.github.io/UBayFS/reference/setWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set weights in UBaymodel object — setWeights","text":"model UBaymodel object created using build.UBaymodel weights vector user-defined prior weights feature block_list list feature indices block; required, block-wise weights specified block_matrix NULL block_matrix matrix containing affiliations features block; required, block-wise weights specified block_list NULL","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/setWeights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set weights in UBaymodel object — setWeights","text":"UBaymodel object updated prior weights","code":""},{"path":[]},{"path":"https://annajenul.github.io/UBayFS/reference/train.html","id":null,"dir":"Reference","previous_headings":"","what":"UBayFS feature selection — train","title":"UBayFS feature selection — train","text":"Genetic algorithm train UBayFS feature selection model.","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UBayFS feature selection — train","text":"","code":"train(x, verbose = FALSE)"},{"path":"https://annajenul.github.io/UBayFS/reference/train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UBayFS feature selection — train","text":"x `UBaymodel` created build.UBaymodel verbose TRUE: GA optimization output printed console","code":""},{"path":"https://annajenul.github.io/UBayFS/reference/train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UBayFS feature selection — train","text":"`UBaymodel` additional list element output containing optimized solution.","code":""}]
